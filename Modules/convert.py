#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.8 on Wed Nov 25 12:46:50 2015
#

import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade
import os, sys
import subprocess
global ossystem
import webbrowser 
ossystem=sys.platform
# begin wxGlade: extracode
# end wxGlade

class convertsf(wx.Dialog):
    def __init__(self, dirname, phtosftools):
        xres,yres= wx.DisplaySize()
        size=(xres/6*xres/yres, yres/5)
        wx.Dialog.__init__(self, None, -1, 'Convert sf_convert', style = wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER  , size=size)
        self.dirname=dirname
        self.phtosftools=phtosftools
        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.Browse = wx.Button(self, wx.ID_ANY, ("Browse"))
        self.sizer_3_staticbox = wx.StaticBox(self, wx.ID_ANY, ("Input File"))
        self.combo_box_1 = wx.ComboBox(self, wx.ID_ANY, choices=[("MTZ"), ("HKL2000"), ("mmCIF"), ("SHELX"), ("CNS"), ("XPLOR"), ("Scalepack"), ("DTREK"), ("TNT"), ("SAINT"), ("EPMR"), ("XSCALE"), ("XPREP"), ("XTALVIEW"), ("X-GEN"), ("XENGEN"), ("MULTAN"), ("MAIN"), ("CIF")], style=wx.CB_DROPDOWN)
        self.sizer_5_staticbox = wx.StaticBox(self, wx.ID_ANY, ("Convert to:"))
        self.Convert = wx.Button(self, wx.ID_ANY, ("Convert"))
        self.navigate = wx.Button(self, wx.ID_ANY, ("Navigate"))
        self.Close = wx.Button(self, wx.ID_ANY, ("Close"))
        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(("convert"))
        self.SetSize((500, 150))
        self.SetBackgroundColour(wx.Colour(249, 249, 248))
        self.SetForegroundColour(wx.Colour(76, 76, 76))
        self.text_ctrl_1.SetMinSize((-1, -1))
        self.Browse.SetMinSize((-1, -1))
        self.combo_box_1.SetMinSize((-1, -1))
        self.combo_box_1.SetSelection(6)
        self.Convert.SetMinSize((-1, -1))
        self.Close.SetMinSize((-1, -1))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_5_staticbox.Lower()
        sizer_5 = wx.StaticBoxSizer(self.sizer_5_staticbox, wx.HORIZONTAL)
        self.sizer_3_staticbox.Lower()
        sizer_3 = wx.StaticBoxSizer(self.sizer_3_staticbox, wx.HORIZONTAL)
        sizer_3.Add(self.text_ctrl_1, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.Browse, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_5.Add(self.combo_box_1, 2, 0, 0)
        sizer_2.Add(sizer_5, 0, wx.EXPAND, 0)
        sizer_4.Add(self.Convert, 0, wx.TOP|wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_4.Add(self.navigate, 0, wx.TOP|wx.LEFT | wx.RIGHT, 10)
        sizer_4.Add(self.Close, 0, wx.TOP|wx.LEFT| wx.RIGHT | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_2.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 0, wx.ALL | wx.EXPAND, 10)
        self.SetSizerAndFit(sizer_1)
        self.Layout()
        self.Bind(wx.EVT_BUTTON, self.onClose, self.Close)
        self.Bind(wx.EVT_BUTTON, self.oninput, self.Browse)
        self.Bind(wx.EVT_BUTTON, self.onsftools, self.Convert) 
        self.Bind(wx.EVT_BUTTON, self.onnavigate, self.navigate) 
        
#        self.methods.Bind(wx.EVT_COMBOBOX, self.onrefresh) 
        # end wxGlade
    def sfinput(self, event):
        #####"sf_convert  -o mmcif -sf sf_file_name"
        choices=["MTZ", "HKL2000", "mmCIF", "SHELX", "CNS", "XPLOR", "Scalepack", "DTREK", 
        "TNT", "SAINT", "EPMR", "XSCALE", "XPREP", "XTALVIEW", "X-GEN", "XENGEN", "MULTAN", "MAIN", "CIF"]
        phtoinput=self.text_ctrl_1.GetValue()
        convertto=self.combo_box_1.GetString(self.combo_box_1.GetSelection())
        command=self.phtosftools+" -o "+convertto.lower()+" -sf "+phtoinput
        return command
    def onterminal(self, event, shell):
        from terminal import  terminal
        ter = terminal(event, shell)
        ter.ShowModal()
        ter.Destroy()    
    def oninput(self, event):
        dlg = wx.FileDialog(self, "Choose a file", self.dirname, "", "*.*", style = wx.FD_OPEN)
        if dlg.ShowModal() == wx.ID_OK:
            name=dlg.GetPath()
            self.text_ctrl_1.SetValue(name)
    def onnavigate(self, event):
        webbrowser.open(self.dirname)    
    def onsftools(self, event): # wxGlade: MyFrame.<event_handler>
        os.chdir(self.dirname)
        sftoolsinput=self.sfinput(event)
        me="To setup CCP4 environment pleae type in terminal: source /path/to/ccp4-6.4.0/bin/ccp4.setup-sh \n export $PATH \n"
#        print(os.environ.get('CCP4i'))
        try:
                if ossystem.startswith("win"):
                    xs=subprocess.Popen(sftoolsinput, bufsize=0, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
                    self.onterminal(event, xs)
                elif ossystem.startswith("darwin"):
                    xs=subprocess.Popen(sftoolsinput, bufsize=0, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
                    self.onterminal(event, xs)
                else:
                    xs=subprocess.Popen(sftoolsinput, bufsize=0, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
                    self.onterminal(event, xs)
                    
                    
        except OSError:
                  pass
    def onClose(self, event):
            self.Destroy()
# end of class MyFrame